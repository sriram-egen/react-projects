import React, { useState, useRef, useEffect } from "react";
import Mark from "mark.js";
import Parser from "html-react-parser";
import "./styles.css";

const docString = "\n\nSUPERHERO: SUPERMANMED \nRECORD #: S000000001\nACCOUNT#: S1234567890\nROOM #: S.101\nDATE OF BIRTH: 02/28/1938\nLOCATION: METROPOLIS \nSEX: MPT \nSTATUS: ACTIVEATTENDING\nPHYS: DOCTOR \nFATEADM DATE: 01/01/1938REPORT \nTYPE: SUPERHERO \nPROFILEDIS DATE: N/A\n\n==================================Superhero Profile==================================\nDatetime Report Generated by STAR Labs: 01/01/2024 00:00\n\n==================================SUPERHERO INFORMATION==================================\n\nSuperhero Name: SUPERMAN\nSuperhero Alias: CLARK KENT\nSecret Identity: JOURNALIST\nPowers: FLIGHT, SUPERSTRENGTH, SUPERSPEED, HEAT VISION, X-RAY VISION, SUPERHUMAN HEARING, INVULNERABILITY\n\n==================================ORIGIN==================================\nPlanet of Origin: KRYPTON\nArrival on Earth: INFANT\nAdopted Parents: JONATHAN AND MARTHA KENT\n\n==================================EQUIPMENT==================================\nMain Weapon: FISTS\nOther Equipment: SUPERMAN CAPE\n\n==================================AFFILIATIONS==================================\nTeam Affiliations: JUSTICE LEAGUE\nEnemies: LEX LUTHOR, BRAINIAC, DARKSEID\n\n==================================\nMENTAL STATE==================================Mental Health Status: SOUND\nPsychological Profile: DEDICATED TO PROTECTING EARTH AND ITS INHABITANTS\n\n==================================PHYSICAL STATE==================================\nHeight: 6'3\"\nWeight: 225 lbs\nBlood Type: KRYPTONIAN\nPhysical Condition: EXCELLENT\n\n==================================ADDITIONAL NOTES==================================Kryptonian Biology: SOLAR ENERGY ABSORPTION FOR POWERS, VULNERABILITY TO KRYPTONITE"

export default function SearchHighlightMarkJs() {
  const [searchVal, setSearchVal] = useState("");
  const [currentIndex, setCurrentIndex] = useState(1);
  const [currentMode, setCurrentMode] = useState("");
  const [docContent, setDocContent] = useState([]);
  const contentRef = useRef(null);
  const resultsRef = useRef([]);
  const markInstance = useRef(null);

  useEffect(() => {
    markInstance.current = new Mark(contentRef.current);
    const lines = replaceSpacesWithNbsp(docString.replace(/\n+/g, "<br>"));

    setDocContent(lines);
  }, []);

  useEffect(() => {
    jumpTo(currentMode);
  }, [currentIndex]);

  function replaceSpacesWithNbsp(str) {
    return str.replace(/\s/g, "&nbsp;");
  }

  const handleSearch = (e) => {
    setSearchVal(e.target.value);
    markInstance.current.unmark();
    markInstance.current.mark(e.target.value, {
      separateWordSearch: true,
      done: () => {
        resultsRef.current = contentRef.current.querySelectorAll("mark");
        setCurrentIndex(1);
        jumpTo();
      },
    });
  };

  const handleNext = () => {
    if (resultsRef.current.length) {
      setCurrentIndex(
        currentIndex < resultsRef.current.length ? currentIndex + 1 : 0
      );
      setCurrentMode("next");
    }
  };

  const handlePrev = () => {
    if (resultsRef.current.length) {
      setCurrentIndex(
        currentIndex > 0 ? currentIndex - 1 : resultsRef.current.length - 1
      );
      setCurrentMode("prev");
    }
  };

  const jumpTo = (type) => {
    if (resultsRef.current.length) {
      if (type) {
        let oldIndex;
        if (type === "next")
          oldIndex = currentIndex > 0 ? currentIndex - 1 : currentIndex;
        if (type === "prev")
          oldIndex =
            currentIndex === contentRef.current.length - 1
              ? currentIndex
              : currentIndex + 1;
        const oldElement = resultsRef.current[oldIndex - 1];
        if (oldElement) oldElement.classList?.remove("current");
      }
      const currentElement =
        resultsRef.current[currentIndex > 0 ? currentIndex - 1 : currentIndex];
      currentElement.classList.add("current");
      const position = currentElement.offsetTop - 50; // Adjust offset as needed
      window.scrollTo(0, position);
    }
  };

  return (
    <div style={{ display: "flex", flexDirection: "column", gap: "20px" }}>
      <div className="header" style={{ display: "flex", gap: "20px" }}>
        Search:
        <input type="search" value={searchVal} onChange={handleSearch} />
        {resultsRef.current.length && searchVal?.length ? (
          <div>
            <button onClick={handlePrev}>Prev</button>
            <button onClick={handleNext}>Next</button>
            {currentIndex}/{resultsRef.current.length}
          </div>
        ) : null}
      </div>
      <div className="content" ref={contentRef}>
        {Parser(`<pre><code>${docContent}</code></pre>`, {})}
      </div>
    </div>
  );
}
